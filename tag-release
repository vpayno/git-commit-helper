#!/usr/bin/env bash

declare tag_version="${1}"
declare tag_note="${2}"

if [[ ! ${tag_version} =~ ^[0-9]+[.][0-9]+[.][0-9]+([.][0-9]+)?$ ]]; then
	printf "ERROR: tag [%s] doesn't match the regex [%s]\n" "${tag_version}" '^[0-9]+[.][0-9]+[.][0-9]+([.][0-9]+)?$'
	exit 1
fi

if git tag | grep -E "^${tag_version}$"; then
	printf "ERROR: tag [%s] already exits\n" "${tag_version}"
	exit 1
fi

if [[ -z ${tag_note} ]]; then
	printf "ERROR: tag note/comment is empty\n"
	exit 1
fi

declare tag_message
tag_message="release: ${tag_version} - ${tag_note}\n\n$(git-cliff --latest --tag "${tag_version}")"

echo Running: git-cliff --tag "${tag_version}"
git-cliff --tag "${tag_version}" >CHANGE_LOG.md
printf "\n"

git add CHANGE_LOG.md
git commit -m "${tag_message}"
printf "\n"

echo Running: git tag -a "${tag_version}" -m "${tag_message}"
git tag -a "${tag_version}" -m "${tag_message}"
printf "\n"

echo Running: git show "${tag_version}"
git show "${tag_version}"
printf "\n"

declare current_branch
current_branch="$(git branch --show-current)"

declare current_remote
current_remote="$(git rev-parse --abbrev-ref --symbolic-full-name "@{u}" | cut -f1 -d'/')"

printf "\n"
printf "Staged commits:\n"
printf "\n"
git log --pretty=format:'%h -%d %s (%cr) <%an>' --abbrev-commit --decorate "${current_remote}/${current_branch}"..
printf "\n"
printf "\n"

if gum confirm "Push the staged commits and tag?"; then

	if git remote | grep -q "^fork$"; then
		git push fork "${current_branch}"
		git push --tag fork
	fi

	if git remote | grep -q "^upstream$"; then
		git push upstream "${current_branch}"
		git push --tag upstream

	elif git remote | grep -q "^origin$"; then
		git push origin "${current_branch}"
		git push --tag origin
	fi

	echo Running: gh release create "${tag_version}" --notes "$(git-cliff --latest --tag "${tag_version}")"
	gh release create "${tag_version}" --notes "$(git-cliff --latest --tag "${tag_version}")"
	printf "\n"

else

	printf "Don't forget to push the tag and commits with the following commands:\n"
	printf "\n"

	if git remote | grep -q "^fork$"; then
		printf "\tgit push fork %s\n" "${current_branch}"
		printf "\tgit push --tag fork\n"
	fi

	if git remote | grep -q "^upstream$"; then
		printf "\tgit push upstream %s\n" "${current_branch}"
		printf "\tgit push --tag upstream\n"

	elif git remote | grep -q "^origin$"; then
		printf "\tgit push origin %s\n" "${current_branch}"
		printf "\tgit push --tag origin\n"
	fi

	printf "\n"
	printf "\tgh release create %s --notes \"\$(%s)\"\n" "${tag_version}" "git-cliff --latest --tag ${tag_version}"
	printf "\n"
fi
