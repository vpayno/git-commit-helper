#!/usr/bin/env bash

# semver rules
# - major: increment on breaking changes
# - minor: increment on new features or security updates
# - patch: increment on everything else
#
# calver rules
# - major: increment on UTC YYYYMMDD change
# - minor: increment on feat or security updates
# - patch: increment on everythng else

set -e

# shellcheck source=git-helpers-lib
source "${HOME}/.git-helpers/git-helpers-lib" || exit

declare tag_note="${1:-}"

declare tag_version

git_lg() {
	git log --pretty=format:'%h -%d %s (%cr) <%an>' --abbrev-commit --decorate "${@}"
} # git_lg()

declare current_branch
current_branch="$(git branch --show-current)"

declare current_remote
current_remote="$(git rev-parse --abbrev-ref --symbolic-full-name "@{u}" | cut -f1 -d'/')"

declare previous_tag
previous_tag="$(git tag --list -n0 | tail -n1)"

declare -i unreleased_commit_count=0

# Can't reliably use wc because the last log line doesn't end with a new line.
# So 0 and 1 commits are indistinguishable from each other.
# format: ^6e5f52e - (HEAD -> main) ci(tag-release): abort when no unreleased commits are found (3 minutes ago) <Victor Payno>$
unreleased_commit_count="$(git_lg "${previous_tag}".. | grep -c -E '[a-z0-9]+\s+-' || true)"

if [[ ${unreleased_commit_count} -eq 0 ]]; then
	printf "\n"
	printf "ERROR: No unreleased commits found since the last tag, %s\n" "${previous_tag}"
	printf "\n"
	git_lg -n 5
	printf "\n\n"
	exit 1
fi

declare default_branch
declare current_branch

default_branch="$(get_default_branch)"
current_branch="$(git branch --show-current)"

declare commit_selector="${previous_tag}.."

if [[ -z ${tag_note} ]]; then
	printf "\n"
	git log --pretty=format:'%h -%d %s (%cr) <%an>' --abbrev-commit --decorate "${commit_selector}"
	printf "\n"

	printf "\n"
	println "Please provide a short description for this release:"
	tag_note="$(gum input --prompt="> " --placeholder="short release description" --width=60)"
	printf "\n"
fi

if [[ -z ${tag_note} ]]; then
	printf "\n"
	printf "ERROR: tag note/comment is empty\n"
	printf "\n"
	exit 1
fi

declare -a commits
mapfile -t commits < <(git log --pretty=format:'%h -%d %s (%cr) <%an>' --abbrev-commit --decorate "${commit_selector}")

declare bump_major=false
declare bump_minor=false

println "## Looking for feature|security commits..."

declare regex_minor_bump='\s(feat|security)(:|\([a-z0-9]+\):)\s'

printf "%s\n" "${commits[@]}" | grep -E "${regex_minor_bump}" || true
printf "\n"

for c in "${commits[@]}"; do
	if echo "${c}" | grep -q -E "${regex_minor_bump}"; then
		bump_minor=true
		break
	fi
done

println "## Looking for Breaking Change commits..."

declare regex_major_bump='\s[a-z]+(\!:|\([a-z0-9]+\)\!:)\s'

printf "%s\n" "${commits[@]}" | grep -E "${regex_minor_bump}" || true
printf "\n"

for c in "${commits[@]}"; do
	if echo "${c}" | grep -q -E "${regex_major_bump}"; then
		bump_major=true
		bump_minor=false
		break
	fi
done

declare tag_current

tag_current="$(git tag --list -n0 | tail -n1)"

# these get treated as strings and integers
declare tag_major
declare tag_minor
declare tag_patch

tag_major="${tag_current%%.*}"
tag_minor="${tag_current%.*}"
tag_minor="${tag_minor#*.}"
tag_patch="${tag_current##*.}"

if ${bump_major}; then
	println "### Bumping major version number"

	((tag_major += 1))
	tag_minor=0
	tag_patch=0
elif ${bump_minor}; then
	println "### Bumping minor version number"

	((tag_minor += 1))
	tag_patch=0
else
	println "### Bumping patch version number"

	((tag_patch += 1))
fi

tag_version="${tag_major}.${tag_minor}.${tag_patch}"

declare tag_message="release: ${tag_version} - ${tag_note}"
declare release_title="${tag_version} - ${tag_note}"

if [[ ! ${tag_version} =~ ^[0-9]+[.][0-9]+[.][0-9]+([.][0-9]+)?$ ]]; then
	printf "ERROR: tag [%s] doesn't match the regex [%s]\n" "${tag_version}" '^[0-9]+[.][0-9]+[.][0-9]+([.][0-9]+)?$'
	exit 1
fi

if git tag | grep -E "^${tag_version}$"; then
	printf "ERROR: tag [%s] already exits\n" "${tag_version}"
	exit 1
fi

printf "\n"
printf "%s\n" "${tag_message}"
printf "\n"
printf "Unreleased commits:\n"
printf "\n"
git_lg "${previous_tag}"..
printf "\n"

gum confirm "Are you sure you want to tag and release?" || exit

declare release_message
set +e
read -r -d '' release_message <<-EOF
	$(git-cliff --strip header --unreleased --tag "${tag_version}")
EOF
set -e

echo Running: git-cliff --tag "${tag_version}"
git-cliff --tag "${tag_version}" >CHANGELOG.md
printf "\n"

git add CHANGELOG.md
git commit -m "${tag_message}"
printf "\n"

echo Running: git tag -a "${tag_version}" -m "${tag_message}"
git tag -a "${tag_version}" -m "${tag_message}"
printf "\n"

echo Running: git show "${tag_version}"
git show "${tag_version}"
printf "\n"

printf "\n"
printf "Staged commits:\n"
printf "\n"
git_lg "${current_remote}/${current_branch}"..
printf "\n"
printf "\n"

if gum confirm "Push the staged commits and tag?"; then

	if git remote | grep -q "^fork$"; then
		git push fork "${current_branch}"
		git push --tag fork
	fi

	if git remote | grep -q "^upstream$"; then
		git push upstream "${current_branch}"
		git push --tag upstream

	elif git remote | grep -q "^origin$"; then
		git push origin "${current_branch}"
		git push --tag origin
	fi

	if git remote get-url --push --all origin | grep -q -E '^git@github[.]'; then
		echo Running: gh release create "${tag_version}" --title \""${release_title}"\" --notes \""${release_message}"\"
		gh release create "${tag_version}" --title "${release_title}" --notes "${release_message}"
		printf "\n"
	fi

	if git remote get-url --push --all origin | grep -q -E '^git@gitlab[.]'; then
		echo Running: glab release create "${tag_version}" --name \""${release_title}"\" --notes \""${release_message}"\"
		glab release create "${tag_version}" --name "${release_title}" --notes "${release_message}"
		printf "\n"
	fi

else

	printf "Don't forget to push the tag and commits with the following commands:\n"
	printf "\n"

	if git remote | grep -q "^fork$"; then
		printf "\tgit push fork %s\n" "${current_branch}"
		printf "\tgit push --tag fork\n"
	fi

	if git remote | grep -q "^upstream$"; then
		printf "\tgit push upstream %s\n" "${current_branch}"
		printf "\tgit push --tag upstream\n"

	elif git remote | grep -q "^origin$"; then
		printf "\tgit push origin %s\n" "${current_branch}"
		printf "\tgit push --tag origin\n"
	fi
	printf "\n"

	if git remote get-url --push --all origin | grep -q -E '^git@github[.]'; then
		printf "\tgh release create %s --title \"%s\" --notes \"\$(git-cliff --strip header --latest)\"\n" "${tag_version}" "${release_title}"
		printf "\n"
	fi

	if git remote get-url --push --all origin | grep -q -E '^git@gitlab[.]'; then
		printf "\tglab release create %s --name \"%s\" --notes \"\$(git-cliff --strip header --latest)\"" "${tag_version}" "${release_title}"
		printf "\n"
	fi
fi
