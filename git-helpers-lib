# Shared shell library for git-helpers
# shellcheck shell=bash

set -e

config() {
	local -a args=("${@}")

	git config --local "${args[@]}"
} # config()

println() {
	gum format --type="markdown" <<-EOF
		${@}
	EOF
	printf "\n"
} # println()

key_exists() {
	# exists key in array
	# 0      1   2  3
	eval '[[ "${'"${3}"'[${1}]+exists}" ]]'
}

usage() {
	println "# git-clean-up-branches-helper"
	println "This scripts helps you delete all merged branches"
	println "-h | --help     : this screen"
	println "-H | --headless : automatically deletes all merged branches on all remotes"
	usage_extra
} # usage()

process_global_args() {
	for arg in "${args[@]}"; do
		case "${arg}" in
			"-h") ;&
			"--help")
				usage
				exit
				;;
			"-H") ;&
			"--headless")
				headless_mode=true
				;;
			*)
				usage
				exit
				;;
		esac
	done
} # process_global_args()

git_guess_default_branch() {
	if git branch --format '%(refname:lstrip=2)' --all | grep -q "^main$"; then
		printf "main"
	elif git branch --format '%(refname:lstrip=2)' --all | grep -q "^master$"; then
		printf "master"
	elif git branch --format '%(refname:lstrip=2)' --all | grep -q "^devel$"; then
		printf "devel"
	fi

	printf "main"
} # git_guess_default_branch()

git_config_check_default_branch() {
	if config misc.default-branch >&/dev/null; then
		default_branch="$(config --get misc.default-branch)"
	else
		message="$(
			cat <<-EOF
				# ERROR: Default Branch Not Found
				Set the default branch with the command
				\`\`\`text
				git config --local misc.default-branch $(git_guess_default_branch)
				\`\`\`

				use \`main\`, \`master\`, \`develop\`, etc - it needs to be a real branch and the project's default branch
			EOF
		)"
		println "${message}"
		exit 1
	fi
} # git_config_check_default_branch()

git_switch_to_default_branch() {
	local current_branch

	current_branch="$(git branch --show-current)"

	if [[ ${current_branch} != "${default_branch}" ]]; then
		println "## changing branch from $(git branch --show-current) to ${default_branch}"
		git switch "${default_branch}" || exit
		printf "\n"
	fi
} # git_switch_to_default_branch()

celebrate() {
	# randomly celebrate
	if ((RANDOM % 5 == 3)); then
		# timeout 5 confetty wasn't working as expected
		confetty &
		sleep 5s
		kill %1
	fi
} # celebrate()

declare -a args=("${@}")
declare arg

declare -x headless_mode=false

# vim:filetype=bash
