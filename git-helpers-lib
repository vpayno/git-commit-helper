#!/usr/bin/env bash
#
# Shared shell library for git-helpers
#
# shellcheck shell=bash

set -e

# use `trap -l` to show all signal number,name pairs
trap trap_ctrl_c INT
trap trap_exit EXIT

trap_ctrl_c() {
	println "# TRAP: caught Ctrl-C, exiting..."
	exit
} # trap_ctrl_c()

trap_exit() {
	cleanup_on_exit
} # trap_exit()

cleanup_on_exit() {
	: "this function should be overriden by the caller"
} # cleanup_on_exit()

config() {
	local -a args=("${@}")

	git config --local "${args[@]}"
} # config()

declare -x GH_PR_DATA_FILE
declare -x GL_MR_DATA_FILE

setup_cr_tmp_files() {
	GH_PR_DATA_FILE="$(mktemp)"
	GL_MR_DATA_FILE="$(mktemp)"
} # setup_cr_tmp_files()

println() {
	gum format --type="markdown" <<-EOF
		${@}
	EOF
	printf "\n"
} # println()

key_exists() {
	# exists key in array
	# 0      1   2  3
	eval '[[ "${'"${3}"'[${1}]+exists}" ]]'
}

usage() {
	println "# git-clean-up-branches-helper"
	println "This scripts helps you delete all merged branches"
	println "-h | --help     : this screen"
	println "-H | --headless : automatically deletes all merged branches on all remotes"
	usage_extra
} # usage()

process_global_args() {
	for arg in "${args[@]}"; do
		case "${arg}" in
			"-h") ;&
			"--help")
				usage
				exit
				;;
			"-H") ;&
			"--headless")
				headless_mode=true
				;;
			*)
				usage
				exit
				;;
		esac
	done
} # process_global_args()

git_guess_default_branch() {
	if git branch --format '%(refname:lstrip=2)' --all | grep -q "^main$"; then
		printf "main"
	elif git branch --format '%(refname:lstrip=2)' --all | grep -q "^master$"; then
		printf "master"
	elif git branch --format '%(refname:lstrip=2)' --all | grep -q "^devel$"; then
		printf "devel"
	else
		printf "main"
	fi
} # git_guess_default_branch()

git_guess_upstream_remote() {
	if git remote | grep -q "^upstream$"; then
		printf "upstream"
	elif git remote | grep -q "^origin$"; then
		printf "origin"
	else
		printf "origin"
	fi
} # git_guess_upstream_remote()

git_guess_fork_remote() {
	if git remote | grep -q "^fork$"; then
		printf "fork"
	elif git remote | grep -q "^${USER}$"; then
		printf "%s" "${USER}"
	else
		printf "%s" "origin"
	fi
} # git_guess_fork_remote()

git_config_check_default_branch() {
	local default_branch
	local message

	if config misc.default-branch >&/dev/null; then
		default_branch="$(get_default_branch)"
	else
		message="$(
			cat <<-EOF
				# ERROR: Default Branch Not Found
				Set the default branch with the command
				\`\`\`text
				git config --local misc.default-branch $(git_guess_default_branch)
				\`\`\`

				use \`main\`, \`master\`, \`develop\`, etc - it needs to be a real branch and the project's default branch
			EOF
		)"
		println "${message}"
		exit 1
	fi

	if ! git branch --format '%(refname:lstrip=2)' | grep -q "^${default_branch}$"; then
		println "# ERROR: default branch [${default_branch}] doesn't exist"
		exit 1
	else
		println "# Default branch, ${default_branch}, exists, continuing."
	fi
} # git_config_check_default_branch()

git_config_check_upstream_remote() {
	local message
	local remote_upstream

	if config misc.remote-upstream >&/dev/null; then
		remote_upstream="$(config --get misc.remote-upstream)"
	else
		message="$(
			cat <<-EOF
				# ERROR: Remote Upstream Not Found
				Set the default upstream remote with the command
				\`\`\`text
				git config --local misc.remote-upstream $(git_guess_upstream_remote)
				\`\`\`

				Use \`origin\`, \`upstream\`, \`github\`, \`gitlab\`, etc.
				It needs to be a remote returned by \`git remote -v\`.

			EOF
		)"
		println "${message}"
		exit 1
	fi

	if ! git remote --verbose | awk '{ print $1 }' | sort -uV | grep -q "^${remote_upstream}$"; then
		println "# ERROR: remote upstream [${remote_upstream}] doesn't exist"
		exit 1
	else
		println "# Remote upstream, ${remote_upstream}, exists, continuing."
	fi
} # git_config_check_upstream_remote()

git_config_check_fork_remote() {
	local message
	local remote_fork

	if config misc.remote-fork >&/dev/null; then
		remote_fork="$(config --get misc.remote-fork)"
	else
		message="$(
			cat <<-EOF
				# ERROR: Remote Upstream Not Found
				Set the default fork remote with the command
				\`\`\`text
				git config --local misc.remote-fork $(git_guess_fork_remote)
				\`\`\`

				Use \`fork\`, \`${USER}\`, etc.
				It needs to be a remote returned by \`git remote -v\`.

			EOF
		)"
		println "${message}"
		exit 1
	fi

	if ! git remote --verbose | awk '{ print $1 }' | sort -uV | grep -q "^${remote_fork}$"; then
		println "# ERROR: remote fork [${remote_fork}] doesn't exist"
		exit 1
	else
		println "# Remote fork, ${remote_fork}, exists, continuing."
	fi
} # git_config_check_fork_remote()

get_default_branch() {
	local default_branch

	default_branch="$(config --get misc.default-branch)"

	printf "%s" "${default_branch}"
} # get_default_branch()

get_current_remote() {
	local current_remote

	current_remote="$(git rev-parse --abbrev-ref --symbolic-full-name "@{u}" | cut -f1 -d'/')"

	printf "%s" "${current_remote}"
} # get_current_remote()

get_current_branch() {
	local current_branch

	current_branch="$(git branch --show-current)"

	printf "%s" "${current_branch}"
} # get_current_branch()

git_switch_to_default_branch() {
	local current_branch
	local default_branch

	current_branch="$(get_current_branch)"
	default_branch="$(get_default_branch)"

	if [[ ${current_branch} != "${default_branch}" ]]; then
		println "## changing branch from $(git branch --show-current) to ${default_branch}"
		git switch "${default_branch}" || exit
		printf "\n"
	fi
} # git_switch_to_default_branch()

celebrate() {
	# randomly celebrate
	if ((RANDOM % 5 == 3)); then
		# timeout 5 confetty wasn't working as expected
		confetty &
		sleep 5s
		kill %1
	fi
} # celebrate()

exit_if_zero() {
	local -i quantity="${1:--}"
	local message="${2:-# No widgets chosen, exiting...}"

	if [[ ${quantity} -eq 0 ]]; then
		println "${message}"
		exit
	fi
} # exit_if_zero()

exit_if_no_staged_changes() {
	local message

	has_staged_changes || exit
} # exit_if_no_staged_changes()

# false if no staged changes, true if changes are staged
has_staged_changes() {
	local message

	if ! git diff --cached --quiet; then
		return 0
	fi

	return 1
} # has_staged_changes()

has_staged_changes_verbose() {
	local message

	if has_staged_changes; then
		println "# Found the following staged changes:"
		git status
		printf "\n"
		return 0
	fi

	message="$(
		cat <<-EOF
			# ERROR: Can't find staged changes

			You can stage changes with one or more of these commands:
			\`\`\`text
			git add --patch
			git add -u .
			git add file(s)
			\`\`\`
		EOF
	)"
	println "${message}"

	return 1
} # has_staged_changes_verbose()

is_git_clean() {
	# --quiet returns 0 when clean and 1 when dirty
	git diff --quiet && git diff --cached --quiet
} # is_git_clean()

is_git_dirty() {
	if is_git_clean; then
		return 1
	fi

	return 0
} # is_git_dirty()

declare -a args=("${@}")
declare arg

declare -x headless_mode=false

# vim:filetype=sh
