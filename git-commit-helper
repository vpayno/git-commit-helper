#!/usr/bin/env bash

# shellcheck source=git-helpers-lib
source "${HOME}/.git-helpers/git-helpers-lib" || exit

process_global_args

main() {
	local -a commit_types
	local commit_type
	local commit_scope
	local commit_subject
	local commit_body
	local commit_created=false

	exit_if_no_staged_changes

	println "# Please choose the commit type:"
	if [[ -f ${HOME}/.git-commit-helper.json ]]; then
		println "## Using custom commit types from ${HOME}/.git-commit-helper.json"
		mapfile -t commit_types < <(jq -r '.helpers.commit.types[]' "${HOME}"/.git-commit-helper.json)
	else
		println "## Using default commit types from ${HOME}/.git-helpers/.git-commit-helper.json"
		mapfile -t commit_types < <(jq -r '.helpers.commit.types[]' "${HOME}"/.git-helpers/.git-commit-helper.json)
	fi
	commit_type="$(gum choose "${commit_types[@]}")"
	printf "\n"

	println "## Choosen commit type:"
	printf "\t%s\n" "${commit_type}"
	printf "\n"

	exit_if_zero ${#commit_type} "# No commit types selected, exiting..."

	println "# Please enter the commit scope (optional):"
	commit_scope="$(gum input --placeholder "scope")"
	if [[ -n ${commit_scope} ]]; then
		commit_scope="(${commit_scope})"
	fi
	printf "\n"

	if gum confirm "Review staged changes?"; then
		git diff --cached --color=always | less --RAW-CONTROL-CHARS
	fi

	println "# Please enter the commit message's subject line:"
	commit_subject="$(gum input --width=50 --placeholder "summary of this change")"
	tmpfile_subject="$(mktemp)"
	echo "${commit_subject}" >"${tmpfile_subject}"
	println "# Checking spelling of commit message subject"
	aspell --master=en_US --lang=en_US --check "${tmpfile_subject}"
	commit_subject="$(cat "${tmpfile_subject}")"
	rm -f "${tmpfile_subject}"
	printf "\n"

	if gum confirm "Review staged changes?"; then
		git diff --cached --color=always | less --RAW-CONTROL-CHARS
	fi

	println "# Please enter the commit message's body (multi-line):"
	println "## Please use returns at the end of each line to new-line wrap the lines at <80 characters per line."
	commit_body="$(gum write --width=79 --placeholder "details of this change")"
	tmpfile_body="$(mktemp)"
	echo "${commit_body}" >"${tmpfile_body}"
	println "# Checking spelling of commit message body"
	aspell --master=en_US --lang=en_US --check "${tmpfile_body}"
	commit_body="$(cat "${tmpfile_body}")"
	rm -f "${tmpfile_body}"
	printf "\n"

	printf "commit_type: %s\n" "${commit_type}"
	printf "commit_scope: %s\n" "${commit_scope}"
	printf "commit_subject: %s\n" "${commit_subject}"
	printf "commit_body: %s\n" "${commit_body}"
	printf "\n"

	gum format --type="markdown" <<-EOF
		# Staged changes:
		$(git status)
	EOF
	gum format --type="markdown" <<-EOF
		# Staged command:
		\`git commit -m "${commit_type}${commit_scope}: ${commit_subject}"\" -m \""${commit_body}"\`
	EOF
	if gum confirm "Commit changes?"; then
		git commit -m "${commit_type}${commit_scope}: ${commit_subject}" -m "${commit_body}"
		commit_created=true
	fi

	println "# Running gitlint on unpushed commits or task branch..."
	if gitlint lint; then
		println "## done."
	else
		println "## failed."
		println "### Please use \`git commit -v --amend\` to fix the lint errors in the latest commit message."
	fi

	if ${commit_created}; then
		celebrate

		println "# Showing git commit summary"
		git show --summary --name-only
	fi
} # main ()

main "${@}"
