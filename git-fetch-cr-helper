#!/usr/bin/env bash

# shellcheck source=git-helpers-lib
source "${HOME}/.git-helpers/git-helpers-lib" || exit

process_global_args

setup_cr_tmp_files

cleanup_on_exit() {
	[[ -f ${GH_PR_DATA_FILE} ]] && rm -f "${GH_PR_DATA_FILE}"
	[[ -f ${GL_MR_DATA_FILE} ]] && rm -f "${GL_MR_DATA_FILE}"
} # cleanup_on_exit()

choose_remote_type() {
	gum choose --limit=1 github gitlab
} # choose_remote_type()

get_gh_pr_data() {
	gh pr list --json number,headRefName,title,author | jq . >"${GH_PR_DATA_FILE}"
} # get_gh_pr_data()

get_gl_mr_data() {
	# num|org_path|repo_name|branch_name
	# 6|one/two/three|shuttle_rs-launchpad-no_2-web_project|upgrade_rocket
	# 5|vpayno|shuttle_rs-launchpad-no_1-web_project|upgrade_axum
	glab mr list | sed -r -e '/^![0-9]+/s/^!([0-9]+)\b\s+([a-zA-Z0-9_\/-]+?)+\/([a-zA-Z0-9_-]+)![0-9]+.*\(([a-zA-Z0-9_-]+)\)$/\1|\2|\3|\4/g' | grep -E '^[0-9]+' >"${GL_MR_DATA_FILE}"
} # get_gl_mr_data()

get_gl_mr_author() {
	local -i cr_num="${1:-0}"

	glab mr view "${cr_num}" | awk '/^author/ { print $NF }'
} # get_gl_mr_author()

get_cr_remote_name() {
	local -a remotes
	local chosen_remote

	mapfile -t remotes < <(git remote | sort -uV)

	chosen_remote="$(gum choose --limit=1 --selected=origin "${remotes[@]}")"

	printf "%s" "${chosen_remote}"
} # get_cr_remote_name()

get_cr_remote_url() {
	local remote="${1}"

	local remote_url

	remote_url="$(git remote get-url --push "${remote}")"

	printf "%s" "${remote_url}"
} # get_cr_remote_url()

get_cr_branch() {
	local remote_type="${1}"
	local -i cr_number="${2}"

	if [[ ${remote_type} == github ]]; then
		jq -r --argjson number "${cr_number}" '.[] | select(.number==$number) | .headRefName' "${GH_PR_DATA_FILE}"
	elif [[ ${remote_type} == gitlab ]]; then
		grep -E "^${cr_number}\b" "${GL_MR_DATA_FILE}" | cut -f4 -d'|'
	fi
} # get_cr_branch()

get_cr_author() {
	local remote_type="${1}"
	local -i cr_number="${2}"

	if [[ ${remote_type} == github ]]; then
		jq -r --argjson number "${cr_number}" '.[] | select(.number==$number) | .author.login' "${GH_PR_DATA_FILE}"
	elif [[ ${remote_type} == gitlab ]]; then
		glab mr view "${cr_number}" | awk '/^author/ { print $NF }'
	fi
} # get_cr_author()

get_cr_fetch_path() {
	local remote_type="${1}"
	local remote_url="${2}"

	local -a records
	local -a cr_numbers
	local cr_number

	if [[ ${remote_type} == github ]]; then
		get_gh_pr_data

		mapfile -t cr_numbers < <(jq -r '.[].number' "${GH_PR_DATA_FILE}")

		exit_if_zero ${#cr_numbers[@]} "# ERROR: no pull-requests found"

		for number in "${cr_numbers[@]}"; do
			local branch
			local title
			local record

			branch="$(jq -r --argjson number "${number}" '.[] | select(.number==$number) | .headRefName' "${GH_PR_DATA_FILE}")"
			title="$(jq -r --argjson number "${number}" '.[] | select(.number==$number) | .title' "${GH_PR_DATA_FILE}")"
			printf -v record "%6d | %42s | %s" "${number}" "${branch}" "${title}"

			records+=("${record}")
		done

		chosen_pr="$(gum choose --limit=1 "${records[@]}")"
		#      6 |                             "upgrade_axum" | "chore: update axum and shuttle dependencies to latest incompatible ve…"
		cr_number="${chosen_pr%%|*}"

		# gh: pull/"${num}"/head:prs/"${num}"
		printf "pull/%d/head:prs/%d" "${cr_number// /}" "${cr_number// /}"
		return
	fi

	if [[ ${remote_type} == gitlab ]]; then
		get_gl_mr_data

		mapfile -t cr_numbers < <(cut -f1 -d'|' "${GL_MR_DATA_FILE}")

		exit_if_zero ${#cr_numbers[@]} "# ERROR: no pull-requests found"

		mapfile -t records < <(cat "${GL_MR_DATA_FILE}")

		chosen_pr="$(gum choose --limit=1 "${records[@]}")"
		#      6 |                             "upgrade_axum" | "chore: update axum and shuttle dependencies to latest incompatible ve…"
		cr_number="${chosen_pr%%|*}"

		# gl: merge-requests/"${num}"/head:mrs/"${num}"
		printf "merge-requests/%s/head:mrs/%s" "${cr_number}" "${cr_number}"
		return
	fi

	println "# ERROR: unknown remote server type, ${remote_url}"
	exit 1
} # get_cr_fetch_path()

main() {
	local default_branch
	local remote_upstream
	local remote_fork
	local chosen_remote_url

	local message

	local repo_main_path
	local worktree_path_prefix
	local worktree_path

	local source_branch
	local current_remote

	local cr_fetch_path
	local cr_remote_url
	local cr_branch
	local cr_number

	local remote_type
	local repo_name
	local remote_branch

	local author_remote_url
	local author_remote_url_p1
	local author_remote_url_p2
	local cr_author

	git_config_check_default_branch

	git_config_check_upstream_remote

	git_config_check_fork_remote

	repo_main_path="$(git rev-parse --show-toplevel)"
	default_branch="$(get_default_branch)"

	println "# switching to default branch"
	git switch "${default_branch}"

	source_branch="$(git branch --show-current)"
	current_remote="$(git rev-parse --abbrev-ref --symbolic-full-name "@{u}" | cut -f1 -d'/')"

	println "# Please select the remote type from where the change review will be fetched from:"
	remote_type="$(choose_remote_type)"

	println "# Please select the remote you want to fetch the change review from:"
	cr_remote_name="$(get_cr_remote_name)"
	cr_remote_url="$(get_cr_remote_url "${cr_remote_name}")"

	# pull/$1/head:prs/$1
	# merge-requests/$1/head:mrs/$1
	cr_fetch_path="$(get_cr_fetch_path "${remote_type}" "${cr_remote_url}")"
	cr_branch="${cr_fetch_path##*:}"
	cr_number="${cr_fetch_path##*/}"

	repo_name="$(git remote get-url "${cr_remote_name}")"
	repo_name="${repo_name#*/}"
	repo_name="${repo_name%.*}"

	remote_branch="$(get_cr_branch "${remote_type}" "${cr_number}")"

	cr_author="$(get_cr_author "${remote_type}" "${cr_number}")"

	chosen_remote_url="$(git remote get-url "${cr_remote_name}")"
	author_remote_url_p1="${chosen_remote_url%:*}"
	author_remote_url_p2="${chosen_remote_url#*/}"
	printf -v author_remote_url "%s:%s/%s" "${author_remote_url_p1}" "${cr_author}" "${author_remote_url_p2}"

	if ! git remote | grep -q -E "\b${cr_author}\b"; then
		println "# Add CR author's remote"
		git remote add "${cr_author}" "${author_remote_url}"
		git remote -v
	fi

	println "# fetching remote change review"
	echo git fetch "${cr_remote_name}" "${cr_fetch_path}"
	git fetch "${cr_remote_name}" "${cr_fetch_path}"

	println "# switching to change review branch"

	git switch "${cr_branch}"

	worktree_path_prefix="${repo_main_path}-cr-"
	worktree_path="${worktree_path_prefix}${remote_branch}"

	println "# Creating branch: ${remote_branch}"
	println "# Creating worktree: ${worktree_path}"
	printf "\n"

	git worktree add -B "${remote_branch}" "${worktree_path}"

	if [[ ${cr_author} != app/dependabot ]]; then
		git fetch "${cr_author}"
		git branch --set-upstream-to="${cr_author}/${remote_branch}" "${remote_branch}"
		printf "\n"
	fi

	git switch "${default_branch}"

	println "# Available worktrees:"
	git worktree list
	printf "\n"

	message="$(
		cat <<-EOF
			# Next steps:

			\`\`\`text
			pushd "${worktree_path}"

			git branch --show-current

			git log --pretty=format:'%h -%d %s (%cr) <%an>' --abbrev-commit --decorate -n 5
			\`\`\`

			# To create fixup commits

			\`\`\`text
			git hf
			\`\`\`

			# To push changes:

			\`\`\`text
			git push ${current_remote} ${remote_branch}
			\`\`\`

			# To show all branch changes:

			\`\`\`text
			git log --pretty=format:'%h -%d %s (%cr) <%an>' --abbrev-commit --decorate ${source_branch}..
			\`\`\`

			# To show unpushed branch changes:

			\`\`\`text
			git log --pretty=format:'%h -%d %s (%cr) <%an>' --abbrev-commit --decorate ${current_remote}/${remote_branch}..HEAD
			\`\`\`

			# Clean up steps:

			\`\`\`text
			pushd "${repo_main_path}"

			git branch --show-current

			git worktree list

			git worktree remove "${worktree_path}"

			git branch --delete ${remote_branch}

			git push ${current_remote} --delete ${remote_branch}
			\`\`\`
		EOF
	)"
	println "${message}"
} # main ()

main "${@}"
