#!/usr/bin/env bash

# shellcheck source=git-helpers-lib
source "${HOME}/.git-helpers/git-helpers-lib" || exit

process_global_args

main() {
	local message

	local repo_main_path
	local worktree_path_prefix
	local worktree_path
	local use_worktree=false

	local source_branch
	local current_remote
	local target_remote

	source_branch="$(git branch --show-current)"
	current_remote="$(git rev-parse --abbrev-ref --symbolic-full-name "@{u}" | cut -f1 -d'/')"

	git_config_check_default_branch

	git_config_check_upstream_remote

	git_config_check_fork_remote

	if gum confirm "Use create a worktree for the branch?"; then
		use_worktree=true
	else
		println "Skipping use of git worktrees"
	fi

	repo_main_path="$(git rev-parse --show-toplevel)"

	mapfile -t all_remotes < <(git remote | sort -uV)

	println "# Choose one remote to create the branch on:"
	target_remote="$(gum choose --ordered --limit=1 --selected=origin "${all_remotes[@]}")"
	printf "\n"

	while :; do
		println "# Please enter the new branch name (^[A-Za-z0-9_-]+$):"
		new_branch_name="$(gum input --placeholder "new-branch-name")"

		if [[ ${new_branch_name} =~ ^[A-Za-z0-9_-]+$ ]]; then
			if git branch | grep -q -E "\b${new_branch_name}\b$"; then
				println "## ERROR: branch, ${new_branch_name}, already exists"
				continue
			fi

			break
		fi

		println "## ERROR: Invalid branch name, please try again"
	done
	printf "\n"

	println "# Creating branch: ${new_branch_name}"

	if ${use_worktree}; then
		worktree_path_prefix="${repo_main_path}-cr-"
		worktree_path="${worktree_path_prefix}${new_branch_name}"

		println "# Creating worktree: ${worktree_path}"
		printf "\n"

		git worktree add --track -B "${new_branch_name}" "${worktree_path}"
		printf "\n"

		git push --set-upstream "${target_remote}" "${new_branch_name}"
		printf "\n"

		println "# Available worktrees:"
		git worktree list
		printf "\n"
	else
		git switch -C "${new_branch_name}"
		printf "\n"

		git push --set-upstream "${target_remote}" "${new_branch_name}"
		printf "\n"
	fi

	message="$(
		cat <<-EOF
			# Next steps:

			\`\`\`text
		EOF

		if ${use_worktree}; then
			cat <<-EOF
				pushd "${worktree_path}"

			EOF
		fi

		cat <<-EOF
			git branch --show-current

			git log --pretty=format:'%h -%d %s (%cr) <%an>' --abbrev-commit --decorate -n 5
			\`\`\`

			# To push changes:

			\`\`\`text
			git push ${current_remote} ${new_branch_name}
			\`\`\`

			# To show all branch changes:

			\`\`\`text
			git log --pretty=format:'%h -%d %s (%cr) <%an>' --abbrev-commit --decorate ${source_branch}..
			\`\`\`

			# To show unpushed branch changes:

			\`\`\`text
			git log --pretty=format:'%h -%d %s (%cr) <%an>' --abbrev-commit --decorate ${current_remote}/${new_branch_name}..HEAD
			\`\`\`

			# Clean up steps:

			\`\`\`text
			pushd "${repo_main_path}"

			git branch --show-current
		EOF

		if ${use_worktree}; then
			cat <<-EOF

				git worktree list

				git worktree remove "${worktree_path}"

			EOF
		fi

		cat <<-EOF
			git branch --delete ${new_branch_name}

			git push ${current_remote} --delete ${new_branch_name}
			\`\`\`
		EOF
	)"
	println "${message}"
} # main ()

main "${@}"
