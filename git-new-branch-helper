#!/usr/bin/env bash

set -e

config() {
	local -a args=("${@}")

	git config --local "${args[@]}"
} # config()

println() {
	gum format --type="markdown" <<-EOF
		${@}
	EOF
	printf "\n"
} # println()

main() {
	local default_branch
	local remote_upstream
	local remote_fork

	local message

	local repo_main_path
	local worktree_path_prefix
	local worktree_path

	local source_branch
	local current_remote

	source_branch="$(git branch --show-current)"
	current_remote="$(git rev-parse --abbrev-ref --symbolic-full-name "@{u}" | cut -f1 -d'/')"

	if config misc.default-branch >&/dev/null; then
		default_branch="$(config --get misc.default-branch)"
	else
		message="$(
			cat <<-EOF
				# ERROR: Default Branch Not Found
				Set the default branch with the command
				\`\`\`text
				git config --local misc.default-branch main
				\`\`\`

				use \`main\`, \`master\`, \`develop\`, etc - it needs to be a real branch and the project's default branch
			EOF
		)"
		println "${message}"
		exit 1
	fi

	if ! git branch --format '%(refname:lstrip=2)' --list main | grep -q "^${default_branch}$"; then
		println "# ERROR: default branch [${default_branch}] doesn't exist"
		exit 1
	else
		println "# Default branch, ${default_branch}, exists, continuing."
	fi

	if config misc.remote-upstream >&/dev/null; then
		remote_upstream="$(config --get misc.remote-upstream)"
	else
		message="$(
			cat <<-EOF
				# ERROR: Remote Upstream Not Found
				Set the default upstream remote with the command
				\`\`\`text
				git config --local misc.remote-upstream ${current_remote}
				\`\`\`

				Use \`origin\`, \`upstream\`, \`github\`, \`gitlab\`, etc.
				It needs to be a remote returned by \`git remote -v\`.
			EOF
		)"
		println "${message}"
		exit 1
	fi

	if ! git remote --verbose | awk '{ print $1 }' | sort -uV | grep -q "^${remote_upstream}$"; then
		println "# ERROR: remote upstream [${remote_upstream}] doesn't exist"
		exit 1
	else
		println "# Remote upstream, ${remote_upstream}, exists, continuing."
	fi

	if config misc.remote-fork >&/dev/null; then
		remote_fork="$(config --get misc.remote-fork)"
	else
		message="$(
			cat <<-EOF
				# ERROR: Remote Upstream Not Found
				Set the default fork remote with the command
				\`\`\`text
				git config --local misc.remote-fork ${current_remote}
				\`\`\`

				Use \`fork\`, \`${USER}\`, etc.
				It needs to be a remote returned by \`git remote -v\`.
			EOF
		)"
		println "${message}"
		exit 1
	fi

	if ! git remote --verbose | awk '{ print $1 }' | sort -uV | grep -q "^${remote_fork}$"; then
		println "# ERROR: remote fork [${remote_fork}] doesn't exist"
		exit 1
	else
		println "# Remote fork, ${remote_fork}, exists, continuing."
	fi

	repo_main_path="$(git rev-parse --show-toplevel)"

	while :; do
		println "# Please enter the new branch name (^[A-Za-z0-9_-]+$):"
		new_branch_name="$(gum input --placeholder "new-branch-name")"

		if [[ ${new_branch_name} =~ ^[A-Za-z0-9_-]+$ ]]; then
			if git branch | grep -q -E "\b${new_branch_name}\b$"; then
				println "## ERROR: branch, ${new_branch_name}, already exists"
				continue
			fi

			break
		fi

		println "## ERROR: Invalid branch name, please try again"
	done
	printf "\n"

	worktree_path_prefix="${repo_main_path}-cr-"
	worktree_path="${worktree_path_prefix}${new_branch_name}"

	println "# Creating branch: ${new_branch_name}"
	println "# Creating worktree: ${worktree_path}"
	printf "\n"

	git worktree add --track -B "${new_branch_name}" "${worktree_path}"
	printf "\n"

	println "# Available worktrees:"
	git worktree list
	printf "\n"

	message="$(
		cat <<-EOF
			# Next steps:

			\`\`\`text
			pushd "${worktree_path}"

			git branch --show-current

			git log --pretty=format:'%h -%d %s (%cr) <%an>' --abbrev-commit --decorate -n 5
			\`\`\`

			# To push changes:

			\`\`\`text
			git push ${current_remote} ${new_branch_name}
			\`\`\`

			# To show all branch changes:

			\`\`\`text
			git log --pretty=format:'%h -%d %s (%cr) <%an>' --abbrev-commit --decorate ${source_branch}..
			\`\`\`

			# To show unpushed branch changes:

			\`\`\`text
			git log --pretty=format:'%h -%d %s (%cr) <%an>' --abbrev-commit --decorate ${current_remote}/${new_branch_name}..HEAD
			\`\`\`

			# Clean up steps:

			\`\`\`text
			pushd "${repo_main_path}"

			git branch --show-current

			git worktree list

			git worktree remove "${worktree_path}"

			git branch --delete ${new_branch_name}

			git push ${current_remote} --delete ${new_branch_name}
			\`\`\`
		EOF
	)"
	println "${message}"
} # main ()

main "${@}"
