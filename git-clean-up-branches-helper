#!/usr/bin/env bash

# shellcheck source=git-helpers-lib
source "${HOME}/.git-helpers/git-helpers-lib" || exit

process_global_args

main() {
	local default_branch
	local current_remote

	local -A map
	local -a worktrees
	local entry

	local -a all_branches
	local csv_branches
	local -a chosen_branches
	local branch

	local -a all_remotes
	local csv_remotes
	local -a chosen_remotes
	local remote

	git_config_check_default_branch

	git_switch_to_default_branch

	default_branch="$(get_default_branch)"
	current_remote="$(get_current_remote)"

	git pull "${current_remote}" "${default_branch}"

	mapfile -t all_remotes < <(git remote | sort -uV)

	local save_ifs="${IFS}"
	IFS=","
	csv_remotes="${all_remotes[*]}"
	IFS="${save_ifs}"

	if ${headless_mode}; then
		chosen_remotes=("${all_remotes[@]}")
	else
		println "# Choose one or more remotes to delete branches from:"
		mapfile -t chosen_remotes < <(gum choose --ordered --no-limit --selected="${csv_remotes}" "${all_remotes[@]}")
		printf "\n"
	fi
	println "## Remotes choosen:"
	printf "\t%s\n" "${chosen_remotes[@]}"
	printf "\n"

	exit_if_zero ${#chosen_remotes[@]} "# No remotes selected, exiting..."

	while :; do
		mapfile -t all_branches < <(git branch --format '%(refname:lstrip=2)' --merged | sort -uV | grep -v -E "^${default_branch}$")

		exit_if_zero ${#chosen_remotes[@]} "# No branches found, exiting..."

		if ${headless_mode}; then
			chosen_branches=("${all_branches[@]}")
			break
		else
			if [[ -z ${csv_branches} ]]; then
				local save_ifs="${IFS}"
				IFS=","
				csv_branches="${all_branches[*]}"
				IFS="${save_ifs}"
			fi

			if [[ ${#all_branches[@]} -eq 0 ]]; then
				println "# No branches available to delete, exiting..."
				exit
			fi

			println "# Choose one or more branches to delete:"
			mapfile -t chosen_branches < <(gum choose --ordered --no-limit --selected="${csv_branches}" "${all_branches[@]}")
			printf "\n"

			exit_if_zero ${#chosen_branches[@]} "# No branches selected, exiting..."

			println "## Selected branches:"
			printf "\t%s\n" "${chosen_branches[@]}"
			printf "\n"

			if gum confirm "Delete the selected branches?"; then
				break
			else
				save_ifs="${IFS}"
				IFS=","
				csv_branches="${chosen_branches[*]}"
				IFS="${save_ifs}"
			fi
		fi
	done

	mapfile -t worktrees < <(git worktree list | awk '{ print $1, $3 }' | grep -v -E "\[${default_branch}\]" | tr -d '][')

	for entry in "${worktrees[@]}"; do
		key="${entry##* }"
		value="${entry%% *}"
		map["${key}"]="${value}"
	done

	local -i deleted_count=0
	local -i error_count=0
	for branch in "${chosen_branches[@]}"; do
		if git branch --format '%(refname:lstrip=2)' --no-merged | grep -q -E "^${branch}$"; then
			if ! gum confirm "Branch [${branch}] isn't merged, continue?"; then
				println "## skipping deleting not merged branch [${branch}]"
				continue
			fi
		fi

		if key_exists "${branch}" "in" "map"; then
			println "# Removing worktree using the branch"
			git worktree remove "${map[${branch}]}"
			printf "\n"
		fi

		git branch --delete "${branch}" || ((error_count += 1))
		printf "\n"

		for remote in "${chosen_remotes[@]}"; do
			if git branch --format '%(refname:lstrip=2)' --all | grep -q -E "^${remote}/${branch}$"; then
				git push "${remote}" --delete "${branch}" || ((error_count += 1))
				printf "\n"
			fi
		done

		((deleted_count += 1))
	done
	printf "\n"

	if [[ ${error_count} -gt 0 ]]; then
		println "# Errors encountered: ${error_count}"
	fi

	celebrate

	println "# Deleted ${deleted_count} of ${#chosen_branches[@]} branches."
	printf "\n"
} # main ()

main "${@}"
