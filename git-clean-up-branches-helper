#!/usr/bin/env bash

set -e

config() {
	local -a args=("${@}")

	git config --local "${args[@]}"
} # config()

println() {
	gum format --type="markdown" <<-EOF
		${@}
	EOF
	printf "\n"
} # println()

key_exists() {
	# exists key in array
	# 0      1   2  3
	eval '[[ "${'"${3}"'[${1}]+exists}" ]]'
}

usage() {
	println "# git-clean-up-branches-helper"
	println "This scripts helps you delete all merged branches"
	println "-h | --help     : this screen"
	println "-H | --headless : automatically deletes all merged branches on all remotes"
} # usage()

declare -a args=("${@}")
declare arg

declare headless_mode=false

for arg in "${args[@]}"; do
	case "${arg}" in
		"-h") ;&
		"--help")
			usage
			exit
			;;
		"-H") ;&
		"--headless")
			headless_mode=true
			;;
		*)
			usage
			exit
			;;
	esac
done

main() {
	local message

	local default_branch
	local current_branch

	local -A map
	local -a worktrees
	local entry

	local -a all_branches
	local csv_branches
	local -a chosen_branches
	local branch

	local -a all_remotes
	local csv_remotes
	local -a chosen_remotes
	local remote

	current_branch="$(git branch --show-current)"

	if config misc.default-branch >&/dev/null; then
		default_branch="$(config --get misc.default-branch)"
	else
		message="$(
			cat <<-EOF
				# ERROR: Default Branch Not Found
				Set the default branch with the command
				\`\`\`text
				git config --local misc.default-branch main
				\`\`\`

				use \`main\`, \`master\`, \`develop\`, etc - it needs to be a real branch and the project's default branch
			EOF
		)"
		println "${message}"
		exit 1
	fi

	if ! git branch --format '%(refname:lstrip=2)' | grep -q "^${default_branch}$"; then
		println "# ERROR: default branch [${default_branch}] doesn't exist"
		exit 1
	else
		println "# Default branch, ${default_branch}, exists, continuing."
	fi

	if [[ ${current_branch} != "${default_branch}" ]]; then
		println "## changing branch from %s to %s" "$(git branch --show-current)" "${default_branch}"
		git switch "${default_branch}" || exit
		printf "\n"
	fi

	mapfile -t all_remotes < <(git remote | sort -uV)

	local save_ifs="${IFS}"
	IFS=","
	csv_remotes="${all_remotes[*]}"
	IFS="${save_ifs}"

	if ${headless_mode}; then
		chosen_remotes=("${all_remotes[@]}")
	else
		println "# Choose one or more remotes to delete branches from:"
		mapfile -t chosen_remotes < <(gum choose --ordered --no-limit --selected="${csv_remotes}" "${all_remotes[@]}")
		printf "\n"
	fi

	while :; do
		mapfile -t all_branches < <(git branch --format '%(refname:lstrip=2)' --merged | sort -uV | grep -v -E "^${default_branch}$")

		if ${headless_mode}; then
			chosen_branches=("${all_branches[@]}")
			break
		else
			if [[ -z ${csv_branches} ]]; then
				local save_ifs="${IFS}"
				IFS=","
				csv_branches="${all_branches[*]}"
				IFS="${save_ifs}"
			fi

			println "# Choose one or more branches to delete:"
			mapfile -t chosen_branches < <(gum choose --ordered --no-limit --selected="${csv_branches}" "${all_branches[@]}")
			printf "\n"

			println "## Selected branches:"
			printf "\t%s\n" "${chosen_branches[@]}"
			printf "\n"

			if gum confirm "Delete the selected branches?"; then
				break
			else
				save_ifs="${IFS}"
				IFS=","
				csv_branches="${chosen_branches[*]}"
				IFS="${save_ifs}"
			fi
		fi
	done

	mapfile -t worktrees < <(git worktree list | awk '{ print $1, $3 }' | grep -v -E "\[${default_branch}\]" | tr -d '][')

	for entry in "${worktrees[@]}"; do
		key="${entry##* }"
		value="${entry%% *}"
		map["${key}"]="${value}"
	done

	local -i deleted_count=0
	local -i error_count=0
	for branch in "${chosen_branches[@]}"; do
		if git branch --format '%(refname:lstrip=2)' --no-merged | grep -q -E "^${branch}$"; then
			if ! gum confirm "Branch [${branch}] isn't merged, continue?"; then
				println "## skipping deleting not merged branch [${branch}]"
				continue
			fi
		fi

		if key_exists "${branch}" "in" "map"; then
			println "# Removing worktree using the branch"
			git worktree remove "${map[${branch}]}"
			printf "\n"
		fi

		git branch --delete "${branch}" || ((error_count += 1))
		printf "\n"

		for remote in "${chosen_remotes[@]}"; do
			if git branch --format '%(refname:lstrip=2)' --all | grep -q -E "^${remote}/${branch}$"; then
				git push "${remote}" --delete "${branch}" || ((error_count += 1))
				printf "\n"
			fi
		done

		((deleted_count += 1))
	done
	printf "\n"

	if [[ ${error_count} -gt 0 ]]; then
		println "# Errors encountered: ${error_count}"
	fi

	# randomly celebrate
	if ((RANDOM % 5 == 3)); then
		# timeout 5 confetty wasn't working as expected
		confetty &
		sleep 5s
		kill %1
	fi

	println "# Deleted ${deleted_count} of ${#chosen_branches[@]} branches."
	printf "\n"
} # main ()

main "${@}"
