#!/usr/bin/env bash

# shellcheck source=git-helpers-lib
source "${HOME}/.git-helpers/git-helpers-lib" || exit

process_global_args

main() {
	local default_branch
	local current_branch
	local current_remote

	local message

	local -a commits
	local commit
	local hash

	local commit_selector
	local rebase_target

	# create rebase
	local mode="create"

	git_config_check_default_branch

	default_branch="$(get_default_branch)"

	current_remote="$(git rev-parse --abbrev-ref --symbolic-full-name "@{u}" | cut -f1 -d'/')"
	current_branch="$(git branch --show-current)"

	if [[ ${current_branch} == "${default_branch}" ]]; then
		commit_selector="${current_remote}/${current_branch}..HEAD"
		rebase_target=""
	else
		commit_selector="${default_branch}.."
		rebase_target="${default_branch}"
	fi

	mapfile -t commits < <(git log --pretty=format:'%h -%d %s (%cr) <%an>' --abbrev-commit --decorate "${commit_selector}")

	if ! has_staged_changes false; then
		mode="rebase"
	fi

	if [[ ${#commits[@]} -eq 0 ]]; then
		println "# Didn't find any commits that can be fixed up."
		return 1
	fi

	if is_git_clean && [[ ${mode} == rebase ]]; then
		local found_fixup=false
		local c

		println "## Looking for fixup commits..."
		for c in "${commits[@]}"; do
			local regex='\sfixup\!\s'
			if [[ ${c} =~ ${regex} ]]; then
				found_fixup=true
				break
			fi
		done

		if ${found_fixup}; then
			println "# All changes committed and found fixup commits"

			printf "\n"
			println "## Commits before rebase:"
			git log --pretty=format:'%h -%d %s (%cr) <%an>' --abbrev-commit --decorate "${commit_selector}"
			printf "\n"
			printf "\n"

			if gum confirm "Do you want to rebase and autosquash?
	=> git rebase --interactive --autosquash ${rebase_target}"; then
				println "=> git rebase --interactive --autosquash ${rebase_target}"
				printf "\n"

				# shellcheck disable=SC2086
				git rebase --interactive --autosquash ${rebase_target} # don't quote since it's sometimes empty
				printf "\n"

				printf "\n"
				println "## Commits after rebase:"
				git log --pretty=format:'%h -%d %s (%cr) <%an>' --abbrev-commit --decorate "${commit_selector}"
				printf "\n"
				printf "\n"
				println "# Don't forget to run \`git push --force\` to update the git server."
				printf "\n"
			else
				println "## Canceled fixup rebase."
			fi

		# check to see if we need to force push
		elif git branch -v | grep -E "\b${current_branch}\b" | grep -q -E '\[ahead [0-9]+, behind [0-9]+]'; then
			printf "\n"

			println "## Commits that need to be force pushed:"
			git log --pretty=format:'%h -%d %s (%cr) <%an>' --abbrev-commit --decorate "${commit_selector}"
			printf "\n"

			if gum confirm "Do you want to force push?
	=> git push --force ${current_remote} ${current_branch}"; then
				printf "\n"

				println "=> git push --force ${current_remote} ${current_branch}"
				printf "\n"

				git push --force "${current_remote}" "${current_branch}"
				printf "\n"
			fi
		fi

		return
	else
		has_staged_changes_verbose || return 0
	fi

	while :; do
		println "# Please choose the commit you would like to fixup:"
		if commit="$(gum choose "${commits[@]}")"; then
			printf "\n"
		else
			println "## Canceled fixup commit target selection."
			return 1
		fi

		hash="${commit%% *}"

		println "# Is this the commit message you want to fixup?"
		println "=> git show --summary --name-only ${hash}"
		printf "\n"

		git show --summary --name-only "${hash}"
		printf "\n"

		if gum confirm "Is this the correct commit?"; then
			break
		else
			println "## Canceled fixup commit target creation."
		fi
	done

	println "=> git commit --fixup ${hash}"
	printf "\n"

	git commit --fixup "${hash}"
	printf "\n"

	git log --pretty=format:'%h -%d %s (%cr) <%an>' --abbrev-commit --decorate "${commit_selector}"
	printf "\n"

	message="$(
		cat <<-EOF
			# Don't forget to run the following commands before merging or pushing to default branch:

			\`\`\`text
			git rebase --interactive --autosquash ${rebase_target}
			git push --force ${current_remote} ${current_branch}
			\`\`\`
		EOF
	)"
	println "${message}"
} # main ()

main "${@}"
