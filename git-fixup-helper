#!/usr/bin/env bash

# shellcheck source=git-helpers-lib
source "${HOME}/.git-helpers/git-helpers-lib" || exit

process_global_args

main() {
	local default_branch
	local current_branch
	local current_origin

	local message

	local -a commits
	local commit
	local hash

	local commit_selector
	local rebase_target

	exit_if_no_staged_changes

	git_config_check_default_branch

	default_branch="$(get_default_branch)"

	current_origin="$(git rev-parse --abbrev-ref --symbolic-full-name "@{u}" | cut -f1 -d'/')"
	current_branch="$(git branch --show-current)"

	if [[ ${current_branch} == "${default_branch}" ]]; then
		commit_selector="${current_origin}/${current_branch}..HEAD"
		rebase_target=""
	else
		commit_selector="${default_branch}.."
		rebase_target="${default_branch}"
	fi

	mapfile -t commits < <(git log --pretty=format:'%h -%d %s (%cr) <%an>' --abbrev-commit --decorate "${commit_selector}")

	if [[ ${#commits[@]} -eq 0 ]]; then
		println "# Didn't find any commits that can be fixed up."
		exit
	fi

	while :; do
		println "# Please choose the commit you would like to fixup:"
		commit="$(gum choose "${commits[@]}")"
		printf "\n"

		hash="${commit%% *}"

		println "# Is this the commit message you want to fixup?"
		git show --summary --name-only "${hash}"
		printf "\n"

		if gum confirm "Is this the correct commit?"; then
			break
		fi
	done

	git commit --fixup "${hash}"
	printf "\n"

	git log --pretty=format:'%h -%d %s (%cr) <%an>' --abbrev-commit --decorate "${commit_selector}"
	printf "\n"

	message="$(
		cat <<-EOF
			# Don't forget to run the following commands before merging or pushing to default branch:

			\`\`\`text
			git rebase --interactive --autosquash ${rebase_target}
			git push --force ${current_origin} ${current_branch}
			\`\`\`
		EOF
	)"
	println "${message}"
} # main ()

main "${@}"
